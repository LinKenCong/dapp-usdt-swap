import { useEffect, useState } from "react";
import type { NextPage } from "next";
import { useRouter } from "next/router";
import { useAccount, usePrepareContractWrite, useContractWrite, useSigner } from "wagmi";
import { utils, ethers } from "ethers";
import { PageConfig, ContentConfig, PoolInfo } from "../constants/type";
import { CONTRACT_MAP } from "../constants/contracts";
import commonSty from "../styles/common.module.scss";
import sty from "../styles/Sell.module.scss";
import { ABI_IUsdtSwapFactory, ABI_IUsdtSwapPool } from "../constants/abi";
import { useEthersSigner } from "../hooks";
import { callFactoryGetPool, getPoolInfo, formatPoolInfo } from "../utils";

/** components */
import PageLayout from "../components/PageLayout";
import ContentLayout from "../components/ContentLayout";
import LabelInput from "../components/Input/LabelInput";
import DisplayList from "../components/DataDisplay/DisplayList";
import BigButton from "../components/Button/BigButton";

const pageConfig: PageConfig = {
  title: "Sell Token",
  description: "Generated by @rainbow-me/create-rainbowkit",
};

const contentConfig: ContentConfig = {
  title: "Sell Token",
  back: "",
};

const Sell: NextPage = () => {
  const router = useRouter();
  const { address, isConnected } = useAccount();
  const signer = useSigner();
  const ethersSigner = useEthersSigner(address, signer.data);
  // tip storage
  const [errorTip, setErrorTip] = useState<string>("");
  // token address storage
  const [tokenAddress, setTokenAddress] = useState<string>("");
  // pool address storage
  const [poolAddress, setPoolAddress] = useState<string>("");
  const [havePool, setHavePool] = useState<Boolean>(false);
  // pool info storage
  const [poolInfo, setPoolInfo] = useState<PoolInfo | null>(null);

  // input onChange
  const inputHandle = (e: any) => {
    const v = e.target.value;
    setTokenAddress(v);
    if (!isConnected) return setErrorTip("Wallet not connected!");
    setErrorTip(!havePool && utils.isAddress(v) ? "This pool does not exist!" : "Please enter the correct address!");
  };

  const getPoolHandle = async () => {
    if (!ethersSigner || !address || !utils.isAddress(tokenAddress)) return;
    const poolAddressRes = await callFactoryGetPool(ethersSigner, [address, utils.getAddress(tokenAddress)]);
    if (poolAddressRes && utils.isAddress(poolAddressRes)) {
      setHavePool(true);
      setErrorTip("");
      setPoolAddress(poolAddressRes);
      const poolInfoRes = await getPoolInfo(ethersSigner, poolAddressRes);
      if (poolInfoRes) setPoolInfo(formatPoolInfo(poolInfoRes));
    }
  };
  // getPool effect
  useEffect(() => {
    setHavePool(false);
    setPoolAddress("");
    getPoolHandle();
  }, [tokenAddress]);

  // createPool config
  const createPoolConfig = usePrepareContractWrite({
    address: utils.getAddress(CONTRACT_MAP.factory),
    abi: ABI_IUsdtSwapFactory,
    functionName: "createPool",
    args: [utils.isAddress(tokenAddress) && utils.getAddress(tokenAddress)],
    enabled: !poolAddress && utils.isAddress(tokenAddress),
  });
  const contractWrite = useContractWrite(createPoolConfig.config);

  // createPool func
  const createPool = async () => {
    const create = await contractWrite?.writeAsync?.();
    await create?.wait().then((res: any) => {
      if (utils.isAddress(poolAddress) && poolAddress !== ethers.constants.AddressZero) {
        setHavePool(true);
        setErrorTip("");
      }
    });
    await getPoolHandle();
  };

  const setPool = () => {
    router.push({
      pathname: "/setPool",
      query: {
        poolAddress: poolAddress,
        tokenAddress: tokenAddress,
      },
    });
  };

  const btnClick = async () => {
    havePool ? setPool() : createPool();
  };

  return (
    <PageLayout pageConfig={pageConfig}>
      <ContentLayout contentConfig={contentConfig}>
        <div className={sty.Sell}>
          <div className={sty.row}>
            <LabelInput
              label="Token"
              type="text"
              placeholder="Contract Address"
              value={tokenAddress}
              onChange={inputHandle}
            />
          </div>
          <div className={sty.row}>
            {havePool && poolInfo && (
              <DisplayList
                data={[
                  { label: "Pool", value: poolAddress },
                  { label: "MaxOutLock", value: String(poolInfo?.maxOutLock) },
                  { label: "Price", value: String(poolInfo?.price) },
                  { label: "SwapAccounts", value: String(poolInfo?.swapAccountsCount) },
                  { label: "Sold", value: String(poolInfo?.sold) },
                ]}
              />
            )}
          </div>
          <div className={sty.row}>
            {tokenAddress && !havePool && <div className={commonSty.errorTip}>{errorTip}</div>}
          </div>
          <div className={sty.row}>
            <BigButton label={havePool ? "Set Pool" : "Create Pool"} onClick={btnClick} />
          </div>
        </div>
      </ContentLayout>
    </PageLayout>
  );
};

export default Sell;
