import { useEffect, useState } from "react";
import type { NextPage } from "next";
import { useRouter } from "next/router";
import { useAccount, useSigner } from "wagmi";
import { utils, ethers, BigNumber } from "ethers";
import { PageConfig, ContentConfig } from "../constants/type";
import { CONTRACT_MAP } from "../constants/contracts";
import commonSty from "../styles/common.module.scss";
import sty from "../styles/Buy.module.scss";
import { useEthersSigner } from "../hooks";
import {
  callPoolPurchasable,
  formatInputFloat,
  callPoolOwner,
  sendApprove,
  callAllowance,
  sendPoolSwap,
  callPoolGetUsdtIn,
  callBalance,
  callPoolPrice,
  callPoolSwapCountOf,
} from "../utils";

/** components */
import PageLayout from "../components/PageLayout";
import ContentLayout from "../components/ContentLayout";
import LabelInput from "../components/Input/LabelInput";
import DisplayList from "../components/DataDisplay/DisplayList";
import BigButton from "../components/Button/BigButton";

const pageConfig: PageConfig = {
  title: "Buy Token",
  description: "Generated by @rainbow-me/create-rainbowkit",
};

const contentConfig: ContentConfig = {
  title: "Buy Token",
  back: "",
};

const Buy: NextPage = () => {
  const router = useRouter();
  const { address, isConnected } = useAccount();
  const signer = useSigner();
  const ethersSigner = useEthersSigner(address, signer.data);
  const [amount, setAmount] = useState<string>("");
  // tip storage
  const [errorTip, setErrorTip] = useState<string>("");
  // pool address storage
  const [poolAddress, setPoolAddress] = useState<string>("");
  const [havePool, setHavePool] = useState<Boolean>(false);
  // pool info storage
  const [price, setPrice] = useState<string>("");
  const [swapCountOf, setSwapCountOf] = useState<string>("");
  const [poolPurchasable, setPoolPurchasable] = useState<string>("");

  // input onChange
  const inputHandle = (e: any) => {
    const v = e.target.value;
    setPoolAddress(v);
    if (!isConnected) return setErrorTip("Wallet not connected!");
    setErrorTip(!havePool && utils.isAddress(v) ? "This pool does not exist!" : "Please enter the correct address!");
  };

  const getPoolHandle = async () => {
    if (!ethersSigner || !address || !utils.isAddress(poolAddress)) return;
    const poolOwner = await callPoolOwner(ethersSigner, poolAddress);
    if (poolOwner && poolOwner !== ethers.constants.AddressZero) {
      setHavePool(true);
      setErrorTip("");
      const _purchasable = await callPoolPurchasable(ethersSigner, poolAddress);
      setPoolPurchasable(utils.formatEther(String(_purchasable)));
      const _swapCountOf = await callPoolSwapCountOf(ethersSigner, poolAddress, [address]);
      setSwapCountOf(utils.formatEther(String(_swapCountOf)));
      const _price = await callPoolPrice(ethersSigner, poolAddress);
      setPrice(utils.formatEther(String(_price)));
    }
  };
  // getPool effect
  useEffect(() => {
    setHavePool(false);
    getPoolHandle();
  }, [poolAddress]);

  // swapPool func
  const swapPool = async (amountETH: BigNumber, usdtInETH: BigNumber) => {
    if (!ethersSigner || !address) return;
    const allowce = await callAllowance(ethersSigner, CONTRACT_MAP.usdt, [address, poolAddress]);
    if (allowce.lt(usdtInETH)) {
      await sendApprove(ethersSigner, CONTRACT_MAP.usdt, [poolAddress, usdtInETH]);
    }
    const tx = await sendPoolSwap(ethersSigner, poolAddress, [amountETH, address]);
    console.log("swapHash", tx?.transactionHash);
  };

  const btnClick = async () => {
    setErrorTip("");
    const amountETH = utils.parseEther(amount);
    // check amount zero
    if (amountETH.isZero()) {
      setErrorTip("Amount Zero!");
      return;
    }
    if (!ethersSigner || !address || !utils.isAddress(poolAddress)) return;

    const purchasable = utils.parseEther(poolPurchasable);
    // check Purchasable Insufficient
    if (purchasable.lt(amountETH)) {
      setErrorTip("Pool Purchasable Insufficient!");
      return;
    }
    const usdtInETH = await callPoolGetUsdtIn(ethersSigner, poolAddress, [amountETH]);
    const balance = await callBalance(ethersSigner, CONTRACT_MAP.usdt, [address]);
    if (usdtInETH) {
      // check USDT Insufficient
      if (balance.lt(usdtInETH)) {
        setErrorTip("USDT Insufficient!");
        return;
      }
      await swapPool(amountETH, usdtInETH);
    }
    await getPoolHandle();
  };

  const formatInput = (e: any) => {
    formatInputFloat(e);
  };

  return (
    <PageLayout pageConfig={pageConfig}>
      <ContentLayout contentConfig={contentConfig}>
        <div className={sty.Buy}>
          <div className={sty.row}>
            <LabelInput
              label="Pool"
              type="text"
              placeholder="Contract Pool"
              value={poolAddress}
              onChange={inputHandle}
            />
          </div>
          <div className={sty.row}>
            {havePool && (
              <DisplayList
                data={[
                  { label: "Price", value: price },
                  { label: "Purchasable", value: poolPurchasable },
                  { label: "My Swap", value: swapCountOf },
                ]}
              />
            )}
          </div>
          {!!havePool && (
            <>
              <div className={sty.row}>
                <div className={sty.transferInputRow}>
                  <div className={sty.group}>
                    <input
                      type="text"
                      value={amount}
                      className={sty.input}
                      onInput={formatInput}
                      onChange={(e: any) => setAmount(String(e.target.value))}
                      placeholder="Enter the quantity you want to buy..."
                    />
                  </div>
                </div>
              </div>
              <div className={sty.row}>
                <BigButton label="Swap" onClick={btnClick} />
              </div>
            </>
          )}
          <div className={sty.row}>{!!errorTip && <div className={commonSty.errorTip}>{errorTip}</div>}</div>
        </div>
      </ContentLayout>
    </PageLayout>
  );
};

export default Buy;
