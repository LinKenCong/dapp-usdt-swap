{
  "address": "0xc4A13887E7320b94524a0aA7C747f4FCa500b7fb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_USDT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x670c469ab2a63259a472c2d8c631cefde7ca5ef252b7a05b92e9135b28a278a7",
  "receipt": {
    "to": null,
    "from": "0xa55BC788183d81C24b52551B9b75599FCAAA1191",
    "contractAddress": "0xc4A13887E7320b94524a0aA7C747f4FCa500b7fb",
    "transactionIndex": 166,
    "gasUsed": "2468801",
    "logsBloom": "0x
    "blockHash": "0x3741a0f1693b9a56f31fb2465c12629b8e267b10e127e7ad0ad6b86c310f61fd",
    "transactionHash": "0x670c469ab2a63259a472c2d8c631cefde7ca5ef252b7a05b92e9135b28a278a7",
    "logs": [],
    "blockNumber": 28867649,
    "cumulativeGasUsed": "18702383",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x55d398326f99059fF775485246999027B3197955"
  ],
  "numDeployments": 1,
  "solcInputHash": "02fc09cfaf25cce7d4ab4d371a748b0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract implements the IUsdtSwapFactory interface and allows users to create new UsdtSwapPool contracts.\",\"kind\":\"dev\",\"methods\":{\"allPoolsLength()\":{\"details\":\"Gets the number of created pools.\",\"returns\":{\"_0\":\"The number of created pools.\"}},\"constructor\":{\"details\":\"Initializes the contract with the address of the USDT token.\",\"params\":{\"_USDT\":\"The address of the USDT token.\"}},\"createPool(address)\":{\"details\":\"Creates a new UsdtSwapPool contract for a given token.\",\"params\":{\"_token\":\"The address of the token to be swapped.\"},\"returns\":{\"pool\":\"The address of the newly created UsdtSwapPool contract.\"}}},\"title\":\"UsdtSwapFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/UsdtSwapFactory.sol\":\"UsdtSwapFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"src/UsdtSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./interfaces/IUsdtSwapFactory.sol\\\";\\nimport \\\"./UsdtSwapPool.sol\\\";\\n\\n/**\\n * @title UsdtSwapFactory\\n * @dev This contract implements the IUsdtSwapFactory interface and allows users to create new UsdtSwapPool contracts.\\n */\\ncontract UsdtSwapFactory is IUsdtSwapFactory {\\n    address public immutable USDT;\\n\\n    // owner => token => pool\\n    mapping(address => mapping(address => address)) public getPool;\\n    address[] public allPools;\\n\\n    /**\\n     * @dev Initializes the contract with the address of the USDT token.\\n     * @param _USDT The address of the USDT token.\\n     */\\n    constructor(address _USDT) {\\n        USDT = _USDT;\\n    }\\n\\n    /**\\n     * @dev Gets the number of created pools.\\n     * @return The number of created pools.\\n     */\\n    function allPoolsLength() external view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    /**\\n     * @dev Creates a new UsdtSwapPool contract for a given token.\\n     * @param _token The address of the token to be swapped.\\n     * @return pool The address of the newly created UsdtSwapPool contract.\\n     */\\n    function createPool(address _token) external returns (address pool) {\\n        require(_token != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(getPool[msg.sender][_token] == address(0), \\\"POOL_EXISTS\\\");\\n        bytes memory bytecode = type(UsdtSwapPool).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, _token));\\n        assembly {\\n            pool := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        UsdtSwapPool(pool).initialize(msg.sender, USDT, _token);\\n        getPool[msg.sender][_token] = pool;\\n        allPools.push(pool);\\n        emit PoolCreated(msg.sender, _token, pool, allPools.length);\\n    }\\n}\\n\",\"keccak256\":\"0x684ca6e84bb326899857908977283a99a0676f573bf74b169088aa78f02ea715\",\"license\":\"MIT\"},\"src/UsdtSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IUsdtSwapFactory.sol\\\";\\nimport \\\"./interfaces/IUsdtSwapPool.sol\\\";\\n\\n/**\\n * @title UsdtSwapPool\\n * @dev This contract implements the IUsdtSwapPool interface and allows users to swap USDT for a specific token.\\n */\\ncontract UsdtSwapPool is IUsdtSwapPool, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public owner;\\n    address public factory;\\n    address public usdt;\\n    address public token;\\n\\n    // user => swap token\\n    mapping(address => uint256) public swapCountOf;\\n    uint256 public swapAccountsCount;\\n    uint256 public sold;\\n\\n    uint112 public maxOutLock;\\n    uint112 public price;\\n\\n    /**\\n     * @dev Initializes the contract with the address of the factory contract.\\n     */\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract with the owner, USDT, and token addresses.\\n     * @param _owner The address of the contract owner.\\n     * @param _usdt The address of the USDT token.\\n     * @param _token The address of the token to be swapped.\\n     */\\n    function initialize(address _owner, address _usdt, address _token) external {\\n        require(msg.sender == factory, \\\"FORBIDDEN\\\");\\n        owner = _owner;\\n        usdt = _usdt;\\n        token = _token;\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that can be purchased.\\n     * @return purchasable The amount of tokens that can be purchased.\\n     */\\n    function purchasableTokens() public view returns (uint256 purchasable) {\\n        uint256 _reserve = IERC20(token).balanceOf(address(this));\\n        uint256 _sold = sold;\\n        uint256 _maxOutLock = uint256(maxOutLock);\\n        uint256 _limit = _maxOutLock <= _reserve ? _maxOutLock : _reserve;\\n        purchasable = _sold >= _limit ? 0 : _limit.sub(_sold);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of USDT required to purchase a given amount of tokens.\\n     * @param _tokenOut The amount of tokens to be purchased.\\n     * @return usdtIn The amount of USDT required to purchase the tokens.\\n     */\\n    function getUsdtIn(uint256 _tokenOut) public view returns (uint256 usdtIn) {\\n        usdtIn = _tokenOut.mul(price).div(1e18);\\n    }\\n\\n    /**\\n     * @dev Swaps USDT for tokens.\\n     * @param _tokenOut The amount of tokens to be purchased.\\n     * @param _to The address to receive the purchased tokens.\\n     */\\n    function swap(uint256 _tokenOut, address _to) external nonReentrant {\\n        require(_tokenOut > 0, \\\"ZERO_AMOUNT\\\");\\n        require(_to != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(price > 0, \\\"ZERO_PRICE\\\");\\n        uint256 _purchasable = purchasableTokens();\\n        require(_purchasable >= _tokenOut, \\\"INSUFFICIENT_AVAILABLE_PURCHASE\\\");\\n        uint256 _usdtIn = getUsdtIn(_tokenOut);\\n        require(IERC20(usdt).balanceOf(msg.sender) >= _usdtIn, \\\"INSUFFICIENT_AVAILABLE_USDT\\\");\\n        require(IERC20(usdt).allowance(msg.sender, address(this)) >= _usdtIn, \\\"INSUFFICIENT_APPROVE_USDT\\\");\\n        if (swapCountOf[msg.sender] == 0) swapAccountsCount++;\\n        swapCountOf[msg.sender] = swapCountOf[msg.sender].add(_tokenOut);\\n        sold = sold.add(_tokenOut);\\n        IERC20(usdt).safeTransferFrom(msg.sender, owner, _usdtIn);\\n        IERC20(token).safeTransfer(_to, _tokenOut);\\n        emit Swap(msg.sender, _usdtIn, _tokenOut, _to);\\n    }\\n\\n    /** ---- ONLY OWNER ---- */\\n\\n    /**\\n     * @dev Modifier that requires the caller to be the contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"FORBIDDEN_ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Subtracts tokens fromthe contract's reserves and transfers them to a specified address.\\n     * @param _amount The amount of tokens to subtract from the reserves.\\n     * @param _to The address to receive the subtracted tokens.\\n     */\\n    function subReserve(uint256 _amount, address _to) external nonReentrant onlyOwner {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n        uint256 _balance = IERC20(token).balanceOf(address(this));\\n        require(_balance >= _amount, \\\"INSUFFICIENT_AVAILABLE_TOKEN\\\");\\n        IERC20(token).safeTransfer(_to, _amount);\\n        emit SubReserve(msg.sender, _amount, _to);\\n    }\\n\\n    function setPrice(uint112 _newPrice) external onlyOwner {\\n        price = _newPrice;\\n    }\\n\\n    function setMaxOutLock(uint112 _newMaxOut) external onlyOwner {\\n        maxOutLock = _newMaxOut;\\n    }\\n\\n    function setNewOwner(address _newOwner) external onlyOwner {\\n        owner = _newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x562ec60bbc5472251ee4fb9ea9c44449d66b92c6d226f113f4514531b6c45b67\",\"license\":\"MIT\"},\"src/interfaces/IUsdtSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUsdtSwapFactory {\\n    event PoolCreated(address indexed owner, address indexed token, address pool, uint256);\\n\\n    function USDT() external view returns (address usdt);\\n\\n    function allPools(uint256 _index) external view returns (address pool);\\n\\n    function allPoolsLength() external view returns (uint256);\\n\\n    function getPool(address _owner, address _token) external view returns (address pool);\\n\\n    function createPool(address _token) external returns (address pool);\\n}\\n\",\"keccak256\":\"0x5bafa365e0e0f609b89f8fa18a117b5368cc221700b34e6849a8e3e2c58805fe\",\"license\":\"MIT\"},\"src/interfaces/IUsdtSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUsdtSwapPool {\\n    event Swap(address indexed sender, uint256 usdtIn, uint256 tokenOut, address indexed to);\\n\\n    event SubReserve(address indexed owner, uint256 amount, address indexed to);\\n\\n    function owner() external view returns (address owner);\\n\\n    function factory() external view returns (address factory);\\n\\n    function usdt() external view returns (address usdt);\\n\\n    function token() external view returns (address token);\\n\\n    function swapCountOf(address account) external view returns (uint256);\\n\\n    function maxOutLock() external view returns (uint112);\\n\\n    function price() external view returns (uint112);\\n\\n    function swapAccountsCount() external view returns (uint256);\\n\\n    function sold() external view returns (uint256);\\n\\n    function getUsdtIn(uint256 tokenOut) external view returns (uint256 usdtIn);\\n\\n    function purchasableTokens() external view returns (uint256 purchasable);\\n\\n    function swap(uint256 tokenOut, address to) external;\\n\\n    function subReserve(uint256 amount, address to) external;\\n\\n    function setPrice(uint112 newPrice) external;\\n\\n    function setMaxOutLock(uint112 newMaxOut) external;\\n\\n    function setNewOwner(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x92c33d0e3f6656acd3f09e4a9f7c76a3232133e97e1c49b91ad0b75418aafb82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051612cf0380380612cf0833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051612bd261011e600039600081816103a301526105a50152612bd26000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806341d1de971461005c578063531aa03e1461008c5780639049f9d2146100bc578063c54e44eb146100ec578063efde4e641461010a575b600080fd5b6100766004803603810190610071919061061c565b610128565b604051610083919061068a565b60405180910390f35b6100a660048036038101906100a191906106d1565b610167565b6040516100b3919061068a565b60405180910390f35b6100d660048036038101906100d19190610711565b6101a9565b6040516100e3919061068a565b60405180910390f35b6100f46105a3565b604051610101919061068a565b60405180910390f35b6101126105c7565b60405161011f919061074d565b60405180910390f35b6001818154811061013857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610219576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610210906107c5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031a90610831565b60405180910390fd5b600060405180602001610335906105d4565b6020820181038252601f19601f82011660405250905060003384604051602001610360929190610899565b604051602081830303815290604052805190602001209050808251602084016000f592508273ffffffffffffffffffffffffffffffffffffffff1663c0c53b8b337f0000000000000000000000000000000000000000000000000000000000000000876040518463ffffffff1660e01b81526004016103e1939291906108c5565b600060405180830381600087803b1580156103fb57600080fd5b505af115801561040f573d6000803e3d6000fd5b50505050826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167febbbe9dc3a19d2f959ac76ac0372b4983cdfb945f5d6aef4873c36fabb2ba8aa856001805490506040516105949291906108fc565b60405180910390a35050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600180549050905090565b6122778061092683390190565b600080fd5b6000819050919050565b6105f9816105e6565b811461060457600080fd5b50565b600081359050610616816105f0565b92915050565b600060208284031215610632576106316105e1565b5b600061064084828501610607565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061067482610649565b9050919050565b61068481610669565b82525050565b600060208201905061069f600083018461067b565b92915050565b6106ae81610669565b81146106b957600080fd5b50565b6000813590506106cb816106a5565b92915050565b600080604083850312156106e8576106e76105e1565b5b60006106f6858286016106bc565b9250506020610707858286016106bc565b9150509250929050565b600060208284031215610727576107266105e1565b5b6000610735848285016106bc565b91505092915050565b610747816105e6565b82525050565b6000602082019050610762600083018461073e565b92915050565b600082825260208201905092915050565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b60006107af600c83610768565b91506107ba82610779565b602082019050919050565b600060208201905081810360008301526107de816107a2565b9050919050565b7f504f4f4c5f455849535453000000000000000000000000000000000000000000600082015250565b600061081b600b83610768565b9150610826826107e5565b602082019050919050565b6000602082019050818103600083015261084a8161080e565b9050919050565b60008160601b9050919050565b600061086982610851565b9050919050565b600061087b8261085e565b9050919050565b61089361088e82610669565b610870565b82525050565b60006108a58285610882565b6014820191506108b58284610882565b6014820191508190509392505050565b60006060820190506108da600083018661067b565b6108e7602083018561067b565b6108f4604083018461067b565b949350505050565b6000604082019050610911600083018561067b565b61091e602083018461073e565b939250505056fe608060405234801561001057600080fd5b50600160008190555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061220e806100696000396000f3fe608060405234801561001057600080fd5b506004361061010a5760003560e01c8063c0c53b8b116100a2578063dd9046ec11610071578063dd9046ec1461027f578063e09d22041461029d578063e2fdf807146102cd578063f5a1f5b4146102eb578063fc0c546a146103075761010a565b8063c0c53b8b1461020d578063c45a015514610229578063cd54223314610247578063d3986f08146102635761010a565b80638da5cb5b116100de5780638da5cb5b14610197578063a035b1fe146101b5578063a4bff26f146101d3578063b3863bf9146101ef5761010a565b8062867dcb1461010f57806302c7e7af1461013f5780632f48ab7d1461015d578063460e26dc1461017b575b600080fd5b61012960048036038101906101249190611612565b610325565b6040516101369190611658565b60405180910390f35b61014761033d565b6040516101549190611658565b60405180910390f35b610165610343565b6040516101729190611682565b60405180910390f35b610195600480360381019061019091906116e3565b610369565b005b61019f610431565b6040516101ac9190611682565b60405180910390f35b6101bd610457565b6040516101ca919061171f565b60405180910390f35b6101ed60048036038101906101e89190611766565b610477565b005b6101f76106f4565b604051610204919061171f565b60405180910390f35b610227600480360381019061022291906117a6565b610714565b005b61023161086c565b60405161023e9190611682565b60405180910390f35b610261600480360381019061025c91906116e3565b610892565b005b61027d60048036038101906102789190611766565b61095a565b005b610287610ee0565b6040516102949190611658565b60405180910390f35b6102b760048036038101906102b291906117f9565b610ee6565b6040516102c49190611658565b60405180910390f35b6102d5610f48565b6040516102e29190611658565b60405180910390f35b61030560048036038101906103009190611612565b611061565b005b61030f611135565b60405161031c9190611682565b60405180910390f35b60056020528060005260406000206000915090505481565b60075481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f090611883565b60405180910390fd5b806008600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6008600e9054906101000a90046dffffffffffffffffffffffffffff1681565b61047f61115b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690611883565b60405180910390fd5b60008211610552576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610549906118ef565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105af9190611682565b602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190611924565b905082811015610635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062c9061199d565b60405180910390fd5b6106828284600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111aa9092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff00bf07ac22bd0a9c15336e9eb50657e587132bef4aa22add3431c9afba4c7cb856040516106df9190611658565b60405180910390a3506106f0611230565b5050565b600860009054906101000a90046dffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079b90611a09565b60405180910390fd5b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091990611883565b60405180910390fd5b80600860006101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff16021790555050565b61096261115b565b600082116109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c906118ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b90611a75565b60405180910390fd5b60006008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1611610a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7a90611ae1565b60405180910390fd5b6000610a8d610f48565b905082811015610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac990611b4d565b60405180910390fd5b6000610add84610ee6565b905080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610b3b9190611682565b602060405180830381865afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c9190611924565b1015610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb490611bb9565b60405180910390fd5b80600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610c1b929190611bd9565b602060405180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c9190611924565b1015610c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9490611c4e565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610cfd5760066000815480929190610cf790611c9d565b91905055505b610d4f84600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461123a90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610da78460075461123a90919063ffffffff16565b600781905550610e1e33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611250909392919063ffffffff16565b610e6b8385600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111aa9092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2a9237ff5aa599ef4c5ee4b1142b53429d5755e2685fe6288b2e3320202115f58387604051610eca929190611ce5565b60405180910390a35050610edc611230565b5050565b60065481565b6000610f41670de0b6b3a7640000610f336008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16856112d990919063ffffffff16565b6112ef90919063ffffffff16565b9050919050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fa69190611682565b602060405180830381865afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190611924565b9050600060075490506000600860009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1690506000838211156110315783611033565b815b90508083101561105557611050838261130590919063ffffffff16565b611058565b60005b94505050505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e890611883565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600054036111a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119790611d5a565b60405180910390fd5b6002600081905550565b61122b8363a9059cbb60e01b84846040516024016111c9929190611d7a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061131b565b505050565b6001600081905550565b600081836112489190611da3565b905092915050565b6112d3846323b872dd60e01b85858560405160240161127193929190611dd7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061131b565b50505050565b600081836112e79190611e0e565b905092915050565b600081836112fd9190611e7f565b905092915050565b600081836113139190611eb0565b905092915050565b600061137d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113e29092919063ffffffff16565b90506000815111156113dd578080602001905181019061139d9190611f1c565b6113dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d390611fbb565b60405180910390fd5b5b505050565b60606113f184846000856113fa565b90509392505050565b60608247101561143f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114369061204d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161146891906120de565b60006040518083038185875af1925050503d80600081146114a5576040519150601f19603f3d011682016040523d82523d6000602084013e6114aa565b606091505b50915091506114bb878383876114c7565b92505050949350505050565b60608315611529576000835103611521576114e18561153c565b611520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151790612141565b60405180910390fd5b5b829050611534565b611533838361155f565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156115725781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a691906121b6565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115df826115b4565b9050919050565b6115ef816115d4565b81146115fa57600080fd5b50565b60008135905061160c816115e6565b92915050565b600060208284031215611628576116276115af565b5b6000611636848285016115fd565b91505092915050565b6000819050919050565b6116528161163f565b82525050565b600060208201905061166d6000830184611649565b92915050565b61167c816115d4565b82525050565b60006020820190506116976000830184611673565b92915050565b60006dffffffffffffffffffffffffffff82169050919050565b6116c08161169d565b81146116cb57600080fd5b50565b6000813590506116dd816116b7565b92915050565b6000602082840312156116f9576116f86115af565b5b6000611707848285016116ce565b91505092915050565b6117198161169d565b82525050565b60006020820190506117346000830184611710565b92915050565b6117438161163f565b811461174e57600080fd5b50565b6000813590506117608161173a565b92915050565b6000806040838503121561177d5761177c6115af565b5b600061178b85828601611751565b925050602061179c858286016115fd565b9150509250929050565b6000806000606084860312156117bf576117be6115af565b5b60006117cd868287016115fd565b93505060206117de868287016115fd565b92505060406117ef868287016115fd565b9150509250925092565b60006020828403121561180f5761180e6115af565b5b600061181d84828501611751565b91505092915050565b600082825260208201905092915050565b7f464f5242494444454e5f4f4e4c595f4f574e4552000000000000000000000000600082015250565b600061186d601483611826565b915061187882611837565b602082019050919050565b6000602082019050818103600083015261189c81611860565b9050919050565b7f5a45524f5f414d4f554e54000000000000000000000000000000000000000000600082015250565b60006118d9600b83611826565b91506118e4826118a3565b602082019050919050565b60006020820190508181036000830152611908816118cc565b9050919050565b60008151905061191e8161173a565b92915050565b60006020828403121561193a576119396115af565b5b60006119488482850161190f565b91505092915050565b7f494e53554646494349454e545f415641494c41424c455f544f4b454e00000000600082015250565b6000611987601c83611826565b915061199282611951565b602082019050919050565b600060208201905081810360008301526119b68161197a565b9050919050565b7f464f5242494444454e0000000000000000000000000000000000000000000000600082015250565b60006119f3600983611826565b91506119fe826119bd565b602082019050919050565b60006020820190508181036000830152611a22816119e6565b9050919050565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b6000611a5f600c83611826565b9150611a6a82611a29565b602082019050919050565b60006020820190508181036000830152611a8e81611a52565b9050919050565b7f5a45524f5f505249434500000000000000000000000000000000000000000000600082015250565b6000611acb600a83611826565b9150611ad682611a95565b602082019050919050565b60006020820190508181036000830152611afa81611abe565b9050919050565b7f494e53554646494349454e545f415641494c41424c455f505552434841534500600082015250565b6000611b37601f83611826565b9150611b4282611b01565b602082019050919050565b60006020820190508181036000830152611b6681611b2a565b9050919050565b7f494e53554646494349454e545f415641494c41424c455f555344540000000000600082015250565b6000611ba3601b83611826565b9150611bae82611b6d565b602082019050919050565b60006020820190508181036000830152611bd281611b96565b9050919050565b6000604082019050611bee6000830185611673565b611bfb6020830184611673565b9392505050565b7f494e53554646494349454e545f415050524f56455f5553445400000000000000600082015250565b6000611c38601983611826565b9150611c4382611c02565b602082019050919050565b60006020820190508181036000830152611c6781611c2b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ca88261163f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611cda57611cd9611c6e565b5b600182019050919050565b6000604082019050611cfa6000830185611649565b611d076020830184611649565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611d44601f83611826565b9150611d4f82611d0e565b602082019050919050565b60006020820190508181036000830152611d7381611d37565b9050919050565b6000604082019050611d8f6000830185611673565b611d9c6020830184611649565b9392505050565b6000611dae8261163f565b9150611db98361163f565b9250828201905080821115611dd157611dd0611c6e565b5b92915050565b6000606082019050611dec6000830186611673565b611df96020830185611673565b611e066040830184611649565b949350505050565b6000611e198261163f565b9150611e248361163f565b9250828202611e328161163f565b91508282048414831517611e4957611e48611c6e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e8a8261163f565b9150611e958361163f565b925082611ea557611ea4611e50565b5b828204905092915050565b6000611ebb8261163f565b9150611ec68361163f565b9250828203905081811115611ede57611edd611c6e565b5b92915050565b60008115159050919050565b611ef981611ee4565b8114611f0457600080fd5b50565b600081519050611f1681611ef0565b92915050565b600060208284031215611f3257611f316115af565b5b6000611f4084828501611f07565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611fa5602a83611826565b9150611fb082611f49565b604082019050919050565b60006020820190508181036000830152611fd481611f98565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612037602683611826565b915061204282611fdb565b604082019050919050565b600060208201905081810360008301526120668161202a565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156120a1578082015181840152602081019050612086565b60008484015250505050565b60006120b88261206d565b6120c28185612078565b93506120d2818560208601612083565b80840191505092915050565b60006120ea82846120ad565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061212b601d83611826565b9150612136826120f5565b602082019050919050565b6000602082019050818103600083015261215a8161211e565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061218882612161565b6121928185611826565b93506121a2818560208601612083565b6121ab8161216c565b840191505092915050565b600060208201905081810360008301526121d0818461217d565b90509291505056fea26469706673582212204eaf5d67eb46513f6f0a5c6ecedbfddb778b3f51c5a551048a294f1eb2e44be764736f6c63430008130033a2646970667358221220375da2071fd0ea5bdf8fdca61a5db8f13fe068dc6f23e0c3453c72b7e2c5d93e64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806341d1de971461005c578063531aa03e1461008c5780639049f9d2146100bc578063c54e44eb146100ec578063efde4e641461010a575b600080fd5b6100766004803603810190610071919061061c565b610128565b604051610083919061068a565b60405180910390f35b6100a660048036038101906100a191906106d1565b610167565b6040516100b3919061068a565b60405180910390f35b6100d660048036038101906100d19190610711565b6101a9565b6040516100e3919061068a565b60405180910390f35b6100f46105a3565b604051610101919061068a565b60405180910390f35b6101126105c7565b60405161011f919061074d565b60405180910390f35b6001818154811061013857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610219576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610210906107c5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031a90610831565b60405180910390fd5b600060405180602001610335906105d4565b6020820181038252601f19601f82011660405250905060003384604051602001610360929190610899565b604051602081830303815290604052805190602001209050808251602084016000f592508273ffffffffffffffffffffffffffffffffffffffff1663c0c53b8b337f0000000000000000000000000000000000000000000000000000000000000000876040518463ffffffff1660e01b81526004016103e1939291906108c5565b600060405180830381600087803b1580156103fb57600080fd5b505af115801561040f573d6000803e3d6000fd5b50505050826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167febbbe9dc3a19d2f959ac76ac0372b4983cdfb945f5d6aef4873c36fabb2ba8aa856001805490506040516105949291906108fc565b60405180910390a35050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600180549050905090565b6122778061092683390190565b600080fd5b6000819050919050565b6105f9816105e6565b811461060457600080fd5b50565b600081359050610616816105f0565b92915050565b600060208284031215610632576106316105e1565b5b600061064084828501610607565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061067482610649565b9050919050565b61068481610669565b82525050565b600060208201905061069f600083018461067b565b92915050565b6106ae81610669565b81146106b957600080fd5b50565b6000813590506106cb816106a5565b92915050565b600080604083850312156106e8576106e76105e1565b5b60006106f6858286016106bc565b9250506020610707858286016106bc565b9150509250929050565b600060208284031215610727576107266105e1565b5b6000610735848285016106bc565b91505092915050565b610747816105e6565b82525050565b6000602082019050610762600083018461073e565b92915050565b600082825260208201905092915050565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b60006107af600c83610768565b91506107ba82610779565b602082019050919050565b600060208201905081810360008301526107de816107a2565b9050919050565b7f504f4f4c5f455849535453000000000000000000000000000000000000000000600082015250565b600061081b600b83610768565b9150610826826107e5565b602082019050919050565b6000602082019050818103600083015261084a8161080e565b9050919050565b60008160601b9050919050565b600061086982610851565b9050919050565b600061087b8261085e565b9050919050565b61089361088e82610669565b610870565b82525050565b60006108a58285610882565b6014820191506108b58284610882565b6014820191508190509392505050565b60006060820190506108da600083018661067b565b6108e7602083018561067b565b6108f4604083018461067b565b949350505050565b6000604082019050610911600083018561067b565b61091e602083018461073e565b939250505056fe608060405234801561001057600080fd5b50600160008190555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061220e806100696000396000f3fe608060405234801561001057600080fd5b506004361061010a5760003560e01c8063c0c53b8b116100a2578063dd9046ec11610071578063dd9046ec1461027f578063e09d22041461029d578063e2fdf807146102cd578063f5a1f5b4146102eb578063fc0c546a146103075761010a565b8063c0c53b8b1461020d578063c45a015514610229578063cd54223314610247578063d3986f08146102635761010a565b80638da5cb5b116100de5780638da5cb5b14610197578063a035b1fe146101b5578063a4bff26f146101d3578063b3863bf9146101ef5761010a565b8062867dcb1461010f57806302c7e7af1461013f5780632f48ab7d1461015d578063460e26dc1461017b575b600080fd5b61012960048036038101906101249190611612565b610325565b6040516101369190611658565b60405180910390f35b61014761033d565b6040516101549190611658565b60405180910390f35b610165610343565b6040516101729190611682565b60405180910390f35b610195600480360381019061019091906116e3565b610369565b005b61019f610431565b6040516101ac9190611682565b60405180910390f35b6101bd610457565b6040516101ca919061171f565b60405180910390f35b6101ed60048036038101906101e89190611766565b610477565b005b6101f76106f4565b604051610204919061171f565b60405180910390f35b610227600480360381019061022291906117a6565b610714565b005b61023161086c565b60405161023e9190611682565b60405180910390f35b610261600480360381019061025c91906116e3565b610892565b005b61027d60048036038101906102789190611766565b61095a565b005b610287610ee0565b6040516102949190611658565b60405180910390f35b6102b760048036038101906102b291906117f9565b610ee6565b6040516102c49190611658565b60405180910390f35b6102d5610f48565b6040516102e29190611658565b60405180910390f35b61030560048036038101906103009190611612565b611061565b005b61030f611135565b60405161031c9190611682565b60405180910390f35b60056020528060005260406000206000915090505481565b60075481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f090611883565b60405180910390fd5b806008600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6008600e9054906101000a90046dffffffffffffffffffffffffffff1681565b61047f61115b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690611883565b60405180910390fd5b60008211610552576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610549906118ef565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105af9190611682565b602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190611924565b905082811015610635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062c9061199d565b60405180910390fd5b6106828284600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111aa9092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff00bf07ac22bd0a9c15336e9eb50657e587132bef4aa22add3431c9afba4c7cb856040516106df9190611658565b60405180910390a3506106f0611230565b5050565b600860009054906101000a90046dffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079b90611a09565b60405180910390fd5b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091990611883565b60405180910390fd5b80600860006101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff16021790555050565b61096261115b565b600082116109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c906118ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b90611a75565b60405180910390fd5b60006008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1611610a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7a90611ae1565b60405180910390fd5b6000610a8d610f48565b905082811015610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac990611b4d565b60405180910390fd5b6000610add84610ee6565b905080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610b3b9190611682565b602060405180830381865afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c9190611924565b1015610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb490611bb9565b60405180910390fd5b80600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610c1b929190611bd9565b602060405180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c9190611924565b1015610c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9490611c4e565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610cfd5760066000815480929190610cf790611c9d565b91905055505b610d4f84600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461123a90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610da78460075461123a90919063ffffffff16565b600781905550610e1e33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611250909392919063ffffffff16565b610e6b8385600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111aa9092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2a9237ff5aa599ef4c5ee4b1142b53429d5755e2685fe6288b2e3320202115f58387604051610eca929190611ce5565b60405180910390a35050610edc611230565b5050565b60065481565b6000610f41670de0b6b3a7640000610f336008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16856112d990919063ffffffff16565b6112ef90919063ffffffff16565b9050919050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fa69190611682565b602060405180830381865afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190611924565b9050600060075490506000600860009054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1690506000838211156110315783611033565b815b90508083101561105557611050838261130590919063ffffffff16565b611058565b60005b94505050505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e890611883565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600054036111a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119790611d5a565b60405180910390fd5b6002600081905550565b61122b8363a9059cbb60e01b84846040516024016111c9929190611d7a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061131b565b505050565b6001600081905550565b600081836112489190611da3565b905092915050565b6112d3846323b872dd60e01b85858560405160240161127193929190611dd7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061131b565b50505050565b600081836112e79190611e0e565b905092915050565b600081836112fd9190611e7f565b905092915050565b600081836113139190611eb0565b905092915050565b600061137d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113e29092919063ffffffff16565b90506000815111156113dd578080602001905181019061139d9190611f1c565b6113dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d390611fbb565b60405180910390fd5b5b505050565b60606113f184846000856113fa565b90509392505050565b60608247101561143f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114369061204d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161146891906120de565b60006040518083038185875af1925050503d80600081146114a5576040519150601f19603f3d011682016040523d82523d6000602084013e6114aa565b606091505b50915091506114bb878383876114c7565b92505050949350505050565b60608315611529576000835103611521576114e18561153c565b611520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151790612141565b60405180910390fd5b5b829050611534565b611533838361155f565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156115725781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a691906121b6565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115df826115b4565b9050919050565b6115ef816115d4565b81146115fa57600080fd5b50565b60008135905061160c816115e6565b92915050565b600060208284031215611628576116276115af565b5b6000611636848285016115fd565b91505092915050565b6000819050919050565b6116528161163f565b82525050565b600060208201905061166d6000830184611649565b92915050565b61167c816115d4565b82525050565b60006020820190506116976000830184611673565b92915050565b60006dffffffffffffffffffffffffffff82169050919050565b6116c08161169d565b81146116cb57600080fd5b50565b6000813590506116dd816116b7565b92915050565b6000602082840312156116f9576116f86115af565b5b6000611707848285016116ce565b91505092915050565b6117198161169d565b82525050565b60006020820190506117346000830184611710565b92915050565b6117438161163f565b811461174e57600080fd5b50565b6000813590506117608161173a565b92915050565b6000806040838503121561177d5761177c6115af565b5b600061178b85828601611751565b925050602061179c858286016115fd565b9150509250929050565b6000806000606084860312156117bf576117be6115af565b5b60006117cd868287016115fd565b93505060206117de868287016115fd565b92505060406117ef868287016115fd565b9150509250925092565b60006020828403121561180f5761180e6115af565b5b600061181d84828501611751565b91505092915050565b600082825260208201905092915050565b7f464f5242494444454e5f4f4e4c595f4f574e4552000000000000000000000000600082015250565b600061186d601483611826565b915061187882611837565b602082019050919050565b6000602082019050818103600083015261189c81611860565b9050919050565b7f5a45524f5f414d4f554e54000000000000000000000000000000000000000000600082015250565b60006118d9600b83611826565b91506118e4826118a3565b602082019050919050565b60006020820190508181036000830152611908816118cc565b9050919050565b60008151905061191e8161173a565b92915050565b60006020828403121561193a576119396115af565b5b60006119488482850161190f565b91505092915050565b7f494e53554646494349454e545f415641494c41424c455f544f4b454e00000000600082015250565b6000611987601c83611826565b915061199282611951565b602082019050919050565b600060208201905081810360008301526119b68161197a565b9050919050565b7f464f5242494444454e0000000000000000000000000000000000000000000000600082015250565b60006119f3600983611826565b91506119fe826119bd565b602082019050919050565b60006020820190508181036000830152611a22816119e6565b9050919050565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b6000611a5f600c83611826565b9150611a6a82611a29565b602082019050919050565b60006020820190508181036000830152611a8e81611a52565b9050919050565b7f5a45524f5f505249434500000000000000000000000000000000000000000000600082015250565b6000611acb600a83611826565b9150611ad682611a95565b602082019050919050565b60006020820190508181036000830152611afa81611abe565b9050919050565b7f494e53554646494349454e545f415641494c41424c455f505552434841534500600082015250565b6000611b37601f83611826565b9150611b4282611b01565b602082019050919050565b60006020820190508181036000830152611b6681611b2a565b9050919050565b7f494e53554646494349454e545f415641494c41424c455f555344540000000000600082015250565b6000611ba3601b83611826565b9150611bae82611b6d565b602082019050919050565b60006020820190508181036000830152611bd281611b96565b9050919050565b6000604082019050611bee6000830185611673565b611bfb6020830184611673565b9392505050565b7f494e53554646494349454e545f415050524f56455f5553445400000000000000600082015250565b6000611c38601983611826565b9150611c4382611c02565b602082019050919050565b60006020820190508181036000830152611c6781611c2b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ca88261163f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611cda57611cd9611c6e565b5b600182019050919050565b6000604082019050611cfa6000830185611649565b611d076020830184611649565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611d44601f83611826565b9150611d4f82611d0e565b602082019050919050565b60006020820190508181036000830152611d7381611d37565b9050919050565b6000604082019050611d8f6000830185611673565b611d9c6020830184611649565b9392505050565b6000611dae8261163f565b9150611db98361163f565b9250828201905080821115611dd157611dd0611c6e565b5b92915050565b6000606082019050611dec6000830186611673565b611df96020830185611673565b611e066040830184611649565b949350505050565b6000611e198261163f565b9150611e248361163f565b9250828202611e328161163f565b91508282048414831517611e4957611e48611c6e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e8a8261163f565b9150611e958361163f565b925082611ea557611ea4611e50565b5b828204905092915050565b6000611ebb8261163f565b9150611ec68361163f565b9250828203905081811115611ede57611edd611c6e565b5b92915050565b60008115159050919050565b611ef981611ee4565b8114611f0457600080fd5b50565b600081519050611f1681611ef0565b92915050565b600060208284031215611f3257611f316115af565b5b6000611f4084828501611f07565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611fa5602a83611826565b9150611fb082611f49565b604082019050919050565b60006020820190508181036000830152611fd481611f98565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612037602683611826565b915061204282611fdb565b604082019050919050565b600060208201905081810360008301526120668161202a565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156120a1578082015181840152602081019050612086565b60008484015250505050565b60006120b88261206d565b6120c28185612078565b93506120d2818560208601612083565b80840191505092915050565b60006120ea82846120ad565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061212b601d83611826565b9150612136826120f5565b602082019050919050565b6000602082019050818103600083015261215a8161211e565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061218882612161565b6121928185611826565b93506121a2818560208601612083565b6121ab8161216c565b840191505092915050565b600060208201905081810360008301526121d0818461217d565b90509291505056fea26469706673582212204eaf5d67eb46513f6f0a5c6ecedbfddb778b3f51c5a551048a294f1eb2e44be764736f6c63430008130033a2646970667358221220375da2071fd0ea5bdf8fdca61a5db8f13fe068dc6f23e0c3453c72b7e2c5d93e64736f6c63430008130033",
  "devdoc": {
    "details": "This contract implements the IUsdtSwapFactory interface and allows users to create new UsdtSwapPool contracts.",
    "kind": "dev",
    "methods": {
      "allPoolsLength()": {
        "details": "Gets the number of created pools.",
        "returns": {
          "_0": "The number of created pools."
        }
      },
      "constructor": {
        "details": "Initializes the contract with the address of the USDT token.",
        "params": {
          "_USDT": "The address of the USDT token."
        }
      },
      "createPool(address)": {
        "details": "Creates a new UsdtSwapPool contract for a given token.",
        "params": {
          "_token": "The address of the token to be swapped."
        },
        "returns": {
          "pool": "The address of the newly created UsdtSwapPool contract."
        }
      }
    },
    "title": "UsdtSwapFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1105,
        "contract": "src/UsdtSwapFactory.sol:UsdtSwapFactory",
        "label": "getPool",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 1108,
        "contract": "src/UsdtSwapFactory.sol:UsdtSwapFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}